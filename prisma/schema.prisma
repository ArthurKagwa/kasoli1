generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id            String   @id @default(uuid())
  walletAddress String   @unique
  name          String?
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  batches       Batch[]
  deals         Deal[]
}

model Buyer {
  id            String   @id @default(uuid())
  walletAddress String   @unique
  organisation  String?
  contactName   String?
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deals         Deal[]   @relation("BuyerDeals")
}

model Transporter {
  id            String   @id @default(uuid())
  walletAddress String   @unique
  name          String?
  vehicleReg    String?
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  batches       Batch[]
  deals         Deal[]   @relation("TransporterDeals")
}

model Platform {
  id            Int      @id @default(1)
  walletAddress String   @unique
  name          String?
  url           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deals         Deal[]
}

model Batch {
  id             String       @id @default(uuid())
  receiptTokenId String
  metaCid        String
  photoCid       String
  origin         String?
  locationLat    Float?
  locationLng    Float?
  destination    String?
  grade          String?
  weightKg       Float
  pricePerKg     Decimal?     @db.Decimal(10, 2)
  status         BatchStatus  @default(LISTED)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  farmerId       String
  transporterId  String?
  farmer         Farmer       @relation(fields: [farmerId], references: [id])
  transporter    Transporter? @relation(fields: [transporterId], references: [id])
  deal           Deal?
}

model Deal {
  id                    String       @id @default(uuid())
  batchId               String       @unique
  origin                String?
  originLat             Float?
  originLng             Float?
  destination           String?
  destinationLat        Float?
  destinationLng        Float?
  distanceKm            Float?
  weightKg              Float?
  farmerId              String
  farmerAmount          Decimal      @db.Decimal(38, 18)
  freightAmount         Decimal?     @db.Decimal(38, 18)
  platformFee           Decimal?     @db.Decimal(38, 18)
  totalLocked           Decimal?     @db.Decimal(38, 18)
  sigMask               Int
  platformAck           Boolean      @default(false)
  status                DealStatus   @default(PENDING_DRIVER)
  signatureTimeoutHours Int          @default(24)
  timeoutAt             DateTime?
  escrowTxHash          String?
  payoutTxHash          String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  buyerId               String
  transporterId         String?
  platformId            Int          @default(1)
  batch                 Batch        @relation(fields: [batchId], references: [id])
  buyer                 Buyer        @relation("BuyerDeals", fields: [buyerId], references: [id])
  farmer                Farmer       @relation(fields: [farmerId], references: [id])
  platform              Platform     @relation(fields: [platformId], references: [id])
  transporter           Transporter? @relation("TransporterDeals", fields: [transporterId], references: [id])
  signatures            Signature[]
}

model Signature {
  id       String   @id @default(uuid())
  dealId   String
  role     Role
  txHash   String
  signedAt DateTime @default(now())
  deal     Deal     @relation(fields: [dealId], references: [id])

  @@unique([dealId, role])
}

model User {
  id            String   @id @default(uuid())
  walletAddress String   @unique
  currentRole   Role
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  FARMER
  BUYER
  TRANSPORTER
  PLATFORM
}

enum BatchStatus {
  LISTED
  LOCKED
  IN_TRANSIT
  DELIVERED
  FINALISED
  DISPUTED
}

enum DealStatus {
  PENDING_DRIVER
  AWAITING_ESCROW
  PENDING_SIGS
  READY_TO_FINAL
  PAID_OUT
  DISPUTED
}
